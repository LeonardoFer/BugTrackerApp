@page "/issues/update"
@page "/issues/update/{issueId}"
@inject HttpClient _httpClient
@inject NavigationManager _navManager

<MudContainer Class="pa-8">
    <MudItem>
        <MudPaper Class="pa-8" Square="true" Elevation="3">
            <MudForm>
                <MudGrid Class="d-flex justify-center">
                    <MudTextField Class="pr-6" @bind-Value="@issueIdInput" T="int" Label="Issue Id" Clearable="true" HelperText="Input the Id of the Issue you want to update."></MudTextField>
                    <MudPaper Class="pt-2" Elevation="0">
                        <MudButton OnClick="OnLoadIssueButton" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Numbers">Load Issue</MudButton>
                    </MudPaper>
                </MudGrid>
            </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem Class="pt-4" xs="12">
        <MudPaper Square="true" Elevation="3" Class="pa-4">
            <MudForm>
                <MudTextField @bind-Value="issueDto!.Title" T="string" Label="Title" Clearable="true" HelperText="Maximum 128 characters." />
                <MudTextField @bind-Value="issueDto!.Description" T="string" Label="Description" Clearable="true" Lines="7" HelperText="Please describe the Bug or Issue in details, including steps to reproduce it if possible. Maximum 2000 characters." />
                <MudGrid Class="d-flex justify-center pa-4">
                    <MudSwitch Class="pt-2" T="bool" Label="Fixed status" @bind-Checked="issueDto.IsFixed" Color="Color.Primary">
                    </MudSwitch>
                    <MudPaper Elevation="0">
                        <MudButton Class="mt-2" OnClick="OnSendUpdateRequest" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Update">Update Issue information</MudButton>
                    </MudPaper>
                </MudGrid>
            </MudForm>
        </MudPaper>
    </MudItem>

    <MudItem Class="pt-4" Style="@($"visibility:{(_alertHidden? "hidden" : "visible")}")">
        <MudAlert Severity="@_alertSeverity" Square="true" ShowCloseIcon="true" Elevation="3" Variant="Variant.Filled" CloseIconClicked="OnCloseButton">
            @_alertText
        </MudAlert>
    </MudItem>
</MudContainer>
<!-- Variables -->
@code
{
    [Parameter]
    public string? issueId { get; set; }
    public int issueIdInput;
    public IssueDto? issueDto = new IssueDto();

    private Severity _alertSeverity;
    private bool _alertHidden;
    private string? _alertText;
}
<!-- OnInitializedAsync -->
@code
{
    protected override async Task OnInitializedAsync()
    {
        _alertHidden = true;

        var response = await _httpClient.GetAsync($"{_httpClient.BaseAddress}issues/get/{issueId}");
        if (response.StatusCode == HttpStatusCode.OK)
        {
            issueDto = await response.Content.ReadFromJsonAsync<IssueDto>();
            issueIdInput = issueDto!.Id;
        }
        else
        {
            _navManager.NavigateTo($"/issues/update");
        }
    }
}
<!-- Custom Methods -->
@code
{
    public async Task OnSendUpdateRequest()
    {
        var request = await _httpClient.PutAsJsonAsync($"{_httpClient.BaseAddress}issues/update/{issueDto?.Id}", issueDto);

        _alertHidden = false;
        if (request.StatusCode == HttpStatusCode.OK)
        {

            _alertText = $"Success! Issue updated.";
            _alertSeverity = Severity.Success;
        }
        else if (request.StatusCode == HttpStatusCode.BadRequest)
        {
            _alertText = $"Error! Incorrect data. Please verify the given information.";
            _alertSeverity = Severity.Error;
        }
        else
        {
            _alertText = $"Error {request.StatusCode}! Something went wrong...";
            _alertSeverity = Severity.Warning;
        }
    }
}
@code
{
    public async Task OnLoadIssueButton()
    {
        var request = await _httpClient.GetAsync($"{_httpClient.BaseAddress}issues/get/{issueIdInput}");

        _alertHidden = false;
        if (request.StatusCode == HttpStatusCode.OK)
        {
            issueDto = await request.Content.ReadFromJsonAsync<IssueDto>();
            _alertText = $"Success! Issue with Id {issueIdInput} found.";
            _alertSeverity = Severity.Success;
        }
        else
        {
            _alertText = "Issue not found. Are you sure this is the correct Id?";
            _alertSeverity = Severity.Warning;
        }
    }
}
@code
{
    public void OnCloseButton()
    {
        _alertHidden = true;
    }
}