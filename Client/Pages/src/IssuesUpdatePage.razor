@page "/issues/update/{issueId}"
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime

<MudContainer Class="pa-8">
    <MudItem xs="12">
        <MudPaper Square="true" Elevation="3" Class="pa-6">
            <MudForm>
                <MudTextField @bind-Value="issueDto.Title" T="string" Label="Title" Clearable="true" HelperText="Maximum 128 characters." />
                <MudTextField @bind-Value="issueDto.Description" T="string" Label="Description" Clearable="true" Lines="7" HelperText="Please describe the Bug or Issue in details, including steps to reproduce it if possible. Maximum 2000 characters." />
                <MudPaper Class="d-flex justify-end" Elevation="0">
                    <MudButton Class="mt-2" OnClick="SendRequest" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Update">Update Issue information</MudButton>
                </MudPaper>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudContainer>


@code
{
    [Parameter]
    public string? issueId { get; set; }

    public IssueDto? issueDto = new IssueDto();
}
@code
{
    protected override async Task OnInitializedAsync()
    {
        var response = await _httpClient.GetFromJsonAsync<IssueDto>($"{_httpClient.BaseAddress}issues/get/{issueId}");
        issueDto = response;
        //await _jsRuntime.InvokeAsync<IssueDto>("console.log", $"{issueDto.Id} | {issueDto.Title} | {issueDto.Description}");
    }
}
@code
{
    public async Task SendRequest()
    {
        var response = await _httpClient.PutAsJsonAsync($"{_httpClient.BaseAddress}issues/update/{issueDto.Id}", issueDto);
        string responseContent = await response.Content.ReadAsStringAsync();
        await _jsRuntime.InvokeAsync<IssueDto>("console.log", $"{responseContent}");
    }
}
