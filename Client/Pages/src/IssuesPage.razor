@page "/issues"
@inject HttpClient _httpClient
@inject NavigationManager _navManager
@inject IJSRuntime _jsRuntime

<MudContainer Class="pa-8">
    <MudItem>
        <MudTable FixedHeader="true" Square="true" Elevation="3" Items="@_issues?.Take(25)" Hover="true" Dense="false">
            <HeaderContent>
                <MudTh Style="text-align:end">#</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Description</MudTh>
                <MudTh Style="text-align:end">Fixed</MudTh>
                <MudTh Style="text-align:end">Creation date</MudTh>
                <MudTh Style="text-align:end">Last modified</MudTh>
                <MudTh Style="text-align:end">Edit</MudTh>
                <MudTh Style="text-align:end">Delete</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="text-align:end">@context.Id</MudTd>
                <MudTd>@context.Title</MudTd>
                <MudTd Style="text-align:justify">@context.Description</MudTd>
                <MudTd Style="text-align:end">
                    <MudIcon Icon="@(context.IsFixed? Icons.Material.Filled.Check : Icons.Material.Filled.Block)" Color="@(context.IsFixed? Color.Success : Color.Error)" />
                </MudTd>
                <MudTd Style="text-align:center">@Utilities.FormatDateText(context.CreationDate)</MudTd>
                <MudTd Style="text-align:center">@Utilities.FormatDateText(context.ModifiedDate)</MudTd>
                <MudTd Style="text-align:center">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Link="@($"issues/update/{context.Id}")">
                        <MudIcon Icon="@Icons.Material.Filled.Edit"></MudIcon>
                    </MudButton>
                </MudTd>
                <MudTd Style="text-align:center">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Link="@($"issues/delete/{context.Id}")">
                        <MudIcon Icon="@Icons.Material.Filled.DeleteForever"></MudIcon>
                    </MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
        <MudPaper Square="true" Elevation="3" Variant="Variant.Filled">
            <MudGrid Class="d-flex justify-center pa-4">
                <MudPagination Color="Color.Primary" Variant="Variant.Filled" Count="@_totalPages" SelectedChanged="OnChangePage" />
            </MudGrid>
            <MudPaper Class="d-flex justify-center pa-4" Elevation="0" Outlined="false">
                <MudText Style="text-align:justify" Typo="Typo.subtitle1">Amount of Entries: @_totalDbEntries</MudText>
            </MudPaper>
        </MudPaper>
    </MudItem>
</MudContainer>

<!-- Variables -->
@code
{
    private List<IssueDto>? _issues = new List<IssueDto>();

    private int _totalDbEntries;
    private int _totalPages;
    private const double _itemsPerPage = 5.0f;
    private int _currentPage = 1;
}
<!-- OnInitializedAsync -->
@code
{
    protected override async Task OnInitializedAsync()
    {
        _totalDbEntries = await _httpClient.GetFromJsonAsync<int>($"{_httpClient.BaseAddress}issues/get/entriesCount");
        await _jsRuntime.InvokeVoidAsync("console.log", $"{_totalDbEntries}");

        _totalPages = (int)Math.Ceiling(_totalDbEntries / _itemsPerPage);

        _issues = await _httpClient.GetFromJsonAsync<List<IssueDto>>($"{_httpClient.BaseAddress}issues/get/skip/{(_currentPage - 1) * _itemsPerPage}/take/{_itemsPerPage}");
    }
}
@code
{
    public async Task OnChangePage(int i)
    {
        _currentPage = i;
        _issues = await _httpClient.GetFromJsonAsync<List<IssueDto>>($"{_httpClient.BaseAddress}issues/get/skip/{(_currentPage - 1) * _itemsPerPage}/take/{_itemsPerPage}");
    }
}
